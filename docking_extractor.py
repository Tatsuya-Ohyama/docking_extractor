#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
docking_extractor.py - Program to extract docking snapshots from pdbqt file generated by autodock or vina
"""

import sys, signal
sys.dont_write_bytecode = True
signal.signal(signal.SIGINT, signal.SIG_DFL)

import argparse

from mods.func_prompt_io import check_exist, check_overwrite



# =============== class =============== #
class DockingResultFile():
	def __init__(self, pdbqt_file):
		self._structure_info = {}

		self.read_pdbqt(pdbqt_file)


	@property
	def structutre_info(self):
		return self._structure_info


	def read_pdbqt(self, input_file):
		"""
		Method to read pdbqt file

		Args:
			input_file (str): pdbqt file

		Returns:
			self
		"""
		self._structure_info = {}
		with open(input_file, "r") as obj_input:
			do_read = False
			structure_number = None
			for line_val in obj_input:
				if line_val.startswith("MODEL"):
					do_read = True
					structure_number = int(line_val.strip().split()[1])
					self._structure_info[structure_number] = []
					continue

				if line_val.startswith("ENDMDL"):
					do_read = False
					continue

				if do_read:
					if line_val.startswith("ATOM") or line_val.startswith("HETATM"):
						self._structure_info[structure_number].append(line_val[:66] + "\n")

		return self


	def output_pdb(self, structure_numbers, output_file):
		"""
		Method to write pdb file

		Args:
			structure_numbers (list): list of structure numbers to be writed
			output_file (str): output pdb file

		Returns:
			self
		"""
		with open(output_file, "w") as obj_output:
			for structure_number in structure_numbers:
				if structure_number not in self._structure_info.keys():
					sys.stderr.write("WARNING: structure number {0} is not found. skipped...\n")
					continue

				for line_val in self._structure_info[structure_number]:
					obj_output.write("{0}{1:>4}{2}".format(line_val[:22], structure_number, line_val[26:]))
				obj_output.write("TER\n")
			obj_output.write("END\n")

		return self



# =============== main =============== #
if __name__ == '__main__':
	parser = argparse.ArgumentParser(description="Program to extract docking snapshots from pdbqt file generated by autodock or vina", formatter_class=argparse.RawTextHelpFormatter)
	parser.add_argument("-i", dest="INPUT_STRUCTURE", metavar="STRUCTURE.pdbqt", required=True, help="docking snapshots file")
	parser.add_argument("-f", dest="FRAMES", metavar="STRUCTURE_NUMBER", required=True, type=int, nargs="+", help="snapshot number to be extracted")
	parser.add_argument("-o", dest="OUTPUT_FILE", metavar="OUTPUT.pdb", required=True, help="output structure file")
	parser.add_argument("-O", dest="FLAG_OVERWRITE", action="store_true", default=False, help="overwrite forcibly")
	args = parser.parse_args()

	check_exist(args.INPUT_STRUCTURE, 2)

	docking_result = DockingResultFile(args.INPUT_STRUCTURE)

	if args.FLAG_OVERWRITE == False:
		check_overwrite(args.OUTPUT_FILE)

	docking_result.output_pdb(sorted(args.FRAMES), args.OUTPUT_FILE)
